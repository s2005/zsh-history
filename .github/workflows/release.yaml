name: "Release dev container features & Generate Documentation"
on:
  workflow_dispatch:

jobs:
  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
      
      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_PAT }}

      - name: "Filter out deprecated features"
        run: |
          mkdir -p ./src-filtered
          for feature_dir in ./src/*/; do
            feature_name=$(basename "$feature_dir")
            if ! grep -q '"deprecated":\s*true' "$feature_dir/devcontainer-feature.json" 2>/dev/null; then
              echo "Including feature: $feature_name"
              cp -r "$feature_dir" "./src-filtered/"
            else
              echo "Skipping deprecated feature: $feature_name"
            fi
          done

      - name: "Publish Features"
        uses: devcontainers/action@v1
        with:
          publish-features: "true"
          base-path-to-features: "./src-filtered"
          generate-docs: "true"
          
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_PAT }}

      - name: "Copy generated docs back to source"
        run: |
          echo "Copying generated README files back to src directory..."
          for feature_dir in ./src-filtered/*/; do
            feature_name=$(basename "$feature_dir")
            if [ -f "$feature_dir/README.md" ] && [ -d "./src/$feature_name" ]; then
              echo "Copying README for feature: $feature_name"
              cp "$feature_dir/README.md" "./src/$feature_name/README.md"
            fi
          done

      - name: "Clean up filtered directory"
        run: |
          echo "Removing temporary src-filtered directory..."
          rm -rf ./src-filtered

      - name: Create PR for Documentation
        id: push_image_info
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_PAT }}
        run: |
          set -e
          echo "Start."
          # Configure git and Push updates
          git config --global user.email github-actions@github.com
          git config --global user.name github-actions
          git config pull.rebase false
          branch=automated-documentation-update-$GITHUB_RUN_ID
          git checkout -b $branch
          message='Automated documentation update'
          # Add / update and commit
          git add src/*/README.md
          git commit -m 'Automated documentation update [skip ci]' || export NO_UPDATES=true
          # Push
          if [ "$NO_UPDATES" != "true" ] ; then
              git push origin "$branch"
              gh pr create --title "$message" --body "$message"
          fi
